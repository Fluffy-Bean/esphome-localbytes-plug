# These substitutions allow the end user to override certain values
substitutions:
  # Device Names
  name: "localbytes-plug-v2"
  friendly_name: "Localbytes Plug V2"
  
  # Icon
  main_icon: "power-socket-uk"

  # Default Relay State
  # Aka: `restore_mode` in documentation
  # Options: `RESTORE_DEFAULT_OFF`, `RESTORE_DEFAULT_ON`, `ALWAYS_ON` & `ALWAYS_OFF`
  default_state: "RESTORE_DEFAULT_OFF"

  # Activity State Threshold
  # Threshold (number) that the device will change from `Idle` to `Active` if power is greater than or equal to
  activity_threshold: "5"

esphome:
  name: "${name}"
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: localbytes.plug-pm-v2
    version: "1.1.2"

esp8266:
  board: esp01_1m
  restore_from_flash: true

logger:

ota:

# This should point to the public location of this yaml file.
dashboard_import:
  package_import_url: github://JamesSwift/localbytes-plug-pm-v2/localbytes-plug-pm-v2.yaml@main

wifi:
  output_power: 15db
  ap:
    ssid: "${friendly_name}"

captive_portal:

web_server:
  port: 80

time:
  - platform: homeassistant

api:
  services:
    - service: calibrate_voltage
      variables:
        actual_value: float
      then:
        lambda: |-
          id(voltage_multiply) = actual_value / id(voltage).raw_state;
          
    - service: calibrate_power
      variables:
        actual_value: float
      then:
        lambda: |-
          id(power_multiply) = actual_value / id(power).raw_state;
          
    - service: calibrate_current
      variables:
        actual_value: float
      then:
        lambda: |-
          id(current_multiply) = actual_value / id(current).raw_state;

globals:
  - id: voltage_multiply
    type: float
    restore_value: true
    initial_value: "0.3"
    
  - id: power_multiply 
    type: float
    restore_value: true
    initial_value: "0.133"
    
  - id: current_multiply 
    type: float
    restore_value: true
    initial_value: "0.805"
  
binary_sensor:
  # Push Button (Toggles Relay When Pressed)
  - platform: gpio
    pin:
      number: GPIO3
      mode: INPUT_PULLUP
      inverted: true
    name: "${friendly_name} Button"
    on_press:
      - switch.toggle: relay
      
  - platform: status
    name: "${friendly_name} Server Status"

switch:
  # Relay (As Switch)
  - platform: gpio
    name: "${friendly_name}"
    icon: "mdi:${main_icon}"
    pin: GPIO14
    id: relay
    restore_mode: "${default_state}"
    on_turn_on:
      - light.turn_on:
          id: led
          brightness: 100%
          transition_length: 0s
    on_turn_off:
      - light.turn_off:
          id: led
          transition_length: 0s

sensor:
  # WiFi Signal Sensor
  - platform: wifi_signal
    name: "${friendly_name} WiFi Status"
    update_interval: 60s
    
  # Power Monitoring
  - platform: hlw8012
    sel_pin:
      number: GPIO12
      inverted: true
    cf_pin: GPIO4
    cf1_pin: GPIO05
    change_mode_every: 4
    update_interval: 3s
    
    voltage:
      name: "${friendly_name} Voltage"
      id: voltage
      unit_of_measurement: V
      accuracy_decimals: 1
      filters:
        - lambda: return x * id(voltage_multiply);
        
    power:
      name: "${friendly_name} Power"
      id: power
      unit_of_measurement: W
      accuracy_decimals: 0
      filters:
        - lambda: return x * id(power_multiply);
        
    current:
      name: "${friendly_name} Current"
      id: current
      unit_of_measurement: A
      accuracy_decimals: 3
      filters:
        - lambda: return x * id(current_multiply);
          
  # Total daily energy sensor
  - platform: total_daily_energy
    name: "${friendly_name} Daily Energy"
    power_id: power
    filters:
      # Multiplication factor from W to kW is 0.001
      - multiply: 0.001
    unit_of_measurement: kWh

  # Make calibration data readable
  - platform: template
    name: "${friendly_name} Voltage Calibration"
    entity_category: diagnostic
    accuracy_decimals: 3
    lambda: |-
      return id(voltage_multiply);
      
  - platform: template
    name: "${friendly_name} Power Calibration"
    entity_category: diagnostic
    accuracy_decimals: 3
    lambda: |-
      return id(power_multiply);
      
  - platform: template
    name: "${friendly_name} Current Calibration"
    entity_category: diagnostic
    accuracy_decimals: 3
    lambda: |-
      return id(current_multiply);

text_sensor:
  # Device Activity State
  # e.g. shows as active if power reading above a certain threshold
  - platform: template
    name: "${friendly_name} Activity State"
    icon: "mdi:${main_icon}"
    lambda: |-
      if (id(power).state >= $activity_threshold) {
        return {"Active"};
      } else {
        return {"Idle"};
      }
    update_interval: 5s

# Relay State LED
output:
  - platform: esp8266_pwm
    id: state_led
    pin:
      number: GPIO13
      inverted: true

light:
  - platform: monochromatic
    output: state_led
    id: led

status_led:
  pin:
    number: GPIO1
    inverted: True
